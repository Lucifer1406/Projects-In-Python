import heapq
import sys
import os
import time

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adjacency_list = [[] for _ in range(vertices)]

    def add_edge(self, u, v, weight):
        self.adjacency_list[u].append((v, weight))
        self.adjacency_list[v].append((u, weight))  # Assuming an undirected graph

    def dijkstra(self, start):
        distance = [sys.maxsize] * self.vertices
        distance[start] = 0
        prev_node = [-1] * self.vertices  # To store the previous node in the shortest path

        pq = [(0, start)]

        while pq:
            dist, u = heapq.heappop(pq)

            if dist > distance[u]:
                continue

            for v, weight in self.adjacency_list[u]:
                new_dist = dist + weight
                if new_dist < distance[v]:
                    distance[v] = new_dist
                    prev_node[v] = u  # Update previous node
                    heapq.heappush(pq, (new_dist, v))

        return distance, prev_node

def display_introduction():
    print("---------->>>>Welcome To The<<<<------------ ")
    time.sleep(1)
    print("")
    time.sleep(1)
    print("///////Map Navigation System!///////")
    time.sleep(1)
    print("-    \n")
    time.sleep(1)
    print("This system helps you find the shortest paths between locations on a map.\n")
    time.sleep(1)
    print("You can input the map data, and the system will use Dijkstra's algorithm\n")
    time.sleep(1)
    print("To calculate the shortest paths between locations.\n")
    time.sleep(1)
    print("----------Let's get started!-------------\n")
    time.sleep(3)

def display_thanks():
    print("\nThank you for using the Map Navigation System!\n")
    print("If you have any questions or feedback, feel free to contact us.\n")
    time.sleep(2.5)
    print("Powered by Ashutosh -22BCS17295 \n")
    print("        Tushar  -22BCS17290 \n")
    print("        Shubham -22BCS17273 ")

def get_path(prev_node, start, end):
    path = []
    current = end
    while current != start:
        path.append(current)
        current = prev_node[current]
    path.append(start)
    path.reverse()
    return path

def main():
    display_introduction()

    # Create a graph with 10 cities
    graph = Graph(10)

    # Add roads with distances between cities
    graph.add_edge(0, 1, 120)
    graph.add_edge(0, 2, 200)
    graph.add_edge(1, 2, 80)
    graph.add_edge(1, 3, 250)
    graph.add_edge(2, 4, 150)
    graph.add_edge(3, 4, 100)
    graph.add_edge(4, 5, 100)
    graph.add_edge(4, 6, 350)
    graph.add_edge(5, 6, 400)
    graph.add_edge(5, 8, 600)
    graph.add_edge(5, 9, 900)
    graph.add_edge(7, 8, 200)
    graph.add_edge(7, 9, 900)
    graph.add_edge(3, 7, 240)
    graph.add_edge(4, 9, 650)
    graph.add_edge(3, 6, 230)
    graph.add_edge(8, 9, 90)
    graph.add_edge(2, 8, 430)

    print("City 0 ->Jaipur\n City 1 ->Jodhpur\n City 2 ->Delhi \n City 3 ->Ajmer\n City 4 ->Chandigarh \n City 5 ->Udaipur \n City 6 ->Himachal \n City 7 ->Surat\nCity 8 ->Mohali \nCity 9 ->Manali \n ")

    answer = input("Do you want to see specific location distance then type 'Yes'. Otherwise You can visit/see all the cities distance\nYes or No: ")

    start_city = int(input("Enter the City: "))
    shortest_distances, prev_node = graph.dijkstra(start_city)

    if answer.lower() == "yes":
        to_city = int(input("Destination: "))
        print("Processing\n")
        time.sleep(3)
        print(f"Shortest Distance from City {start_city} to City {to_city}: {shortest_distances[to_city]} kilometers")
        path = get_path(prev_node, start_city, to_city)
        print("Path: ", end="")
        for city in path:
            print(f"{city} -> ", end="")
        print(to_city)
    else:
        for i in range(graph.vertices):
            if i != start_city:
                path = get_path(prev_node, start_city, i)
                print(f"Shortest Distance from City {start_city} to City {i}: {shortest_distances[i]} kilometers")
                print("Path: ", end="")
                for city in path:
                    print(f"{city} -> ", end="")
                print(i)
        time.sleep(1.5)

    display_thanks()

if __name__ == "__main__":
    main()
